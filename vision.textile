---
layout: manual
title: Design principles
---

<h3 class='zquote' align='left'> 
"It seems that perfection is reached not when there is nothing left to add, but when there is nothing left to remove."
</h3>

<p align='right'> _Antoine de Saint-Exup√©ry_</p>

<!-- <h3 align='center'>Minimalism in all its forms</h3> --> 

h3. Minimalism in all its forms

* What is left out of a framework is as important as what is included, It's easy to pile on features, removing them is _very_ hard and problematic.

* The functionality that is added should have the smallest _surface area_ as possible <br/>Lets define the _*feature conceptual density*_ by this ratio : functionality / (conceptual _surface area_). 
The _surface area_ here means the complexity added to the API, DSL, or just the number of concepts that need to be introduced in order to use the functionality. Yes complexity is subjective, and this is not an exact science, but more of an art. 

<!-- than if it needs a new keyword, operator or API method. A good example of this is the composability of statements and type arithmetic : they cause *zero* increase of the API nor do they need to introduce special keywords, all the complexity is _hidden_ in the Squeryl's engine room. In contrast, the *forUpdate* method in Query[T] increases the _surface area_, but was deemed usefull enough to deserve its presence. -->

* Zero tolerance for redundancy : the worst form of redundancy is the one imposed by a framework or library on user code. EJB is probably the worst offender in this respect.


* Keep in mid that a persistence layer addresses only one aspect among many in an application and should leave as much _conceptual room_ as possible for the other aspects.
